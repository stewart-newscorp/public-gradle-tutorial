import com.google.gson.Gson
import com.google.gson.GsonBuilder
import com.google.gson.reflect.TypeToken
import java.util.Properties

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.6/samples
 */



buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("org.jetbrains.kotlinx","kotlinx-serialization-json",libs.versions.kotlinxSerializationVersion.get())
        classpath("com.google.code.gson","gson",libs.versions.gsonVersion.get())
    }
}

tasks.register("sayHelloWorld") {
    doFirst {
        logger.info("Hello World!")
    }
}

tasks.register("printHiProperty") {
    doLast {
        val foo = project.properties["hi"]
        logger.info("foo: $foo")
    }
}

tasks.register("readEnvironmentVariables") {
    doLast {
        System.getenv("SECRET_KEY")?.let {
            if (it.isEmpty()) {
                throw IllegalArgumentException("SECRET_KEY is empty")
            } else {
                logger.info("SECRET_KEY is set")
            }
        }
    }
}

tasks.register<Copy>("copyTaskSample") {
    doFirst {
        logger.info("copyTaskSample started!")
    }
    from("file.txt")
    into("build")
    doLast {
        logger.info("Finished copying")
    }
}

tasks.register<Exec>("sleepTask") {
    workingDir(".")
    if (System.getProperty("os.name").startsWith("Windows")) {
        commandLine("cmd", "/c", "timeout", "/t", "1")
    } else {
        commandLine("sleep", "1")
    }
    dependsOn("copyTaskSample")
}


val gson: Gson = GsonBuilder().setPrettyPrinting().create()
tasks.register("readJSONFile") {
    doLast {
        val jsonContent = File("data.json").readText()
        val mapType = object : TypeToken<Map<String, Any>>() {}.type
        val map: Map<String, Any> = gson.fromJson(jsonContent, mapType)
        logger.info("read json file $map")
    }
}

tasks.getByName("readJSONFile") { dependsOn("sleepTask") }

// can run in parallel like: ./gradlew longRunningTask1 longRunningTask2 longRunningTask3 longRunningTask4
tasks.register("longRunningTask1") {
    doLast {
        logger.info("longRunningTask1 sleeping")
        Thread.sleep(20000)
        logger.info("longRunningTask1 finished sleeping")
    }
}

tasks.register("longRunningTask2") {
    doLast {
        logger.info("longRunningTask2 sleeping")
        Thread.sleep(1000)
        logger.info("longRunningTask2 finished sleeping")
    }
}

tasks.register("longRunningTask3") {
    doLast {
        logger.info("longRunningTask3 sleeping")
        Thread.sleep(15000)
        logger.info("longRunningTask3 finished sleeping")
    }
}

tasks.register("longRunningTask4") {
    doLast {
        logger.info("longRunningTask3 sleeping")
        Thread.sleep(3000)
        logger.info("longRunningTask3 finished sleeping")
    }
}


tasks.register("requiresLongRunningTasks") {
    dependsOn("longRunningTask1", "longRunningTask2", "longRunningTask3", "longRunningTask4")
}

fun fibonacci(n: Int): Int {
    return when (n) {
        0 -> 0
        1 -> 1
        else -> fibonacci(n - 1) + fibonacci(n - 2)
    }
}

// takes 3 seconds to run in my machine using the jdk, and 10 seconds to run with python3
tasks.register("fibonacciTask") {
    doLast {
        logger.info("fibonacciTask started")
        val result = fibonacci(40)
        logger.info("fibonacciTask result: $result")
    }
}

tasks.register("fibonacciTask45") {
    doLast {
        logger.info("fibonacciTask started")
        val result = fibonacci(45)
        logger.info("fibonacciTask result: $result")
    }
}


tasks.register("fibonacciTaskCached") {
    inputs.property("number", 45)
    val outputFile = File(project.layout.buildDirectory.get().asFile, "fibonacciTask100.txt")
    outputs.file(outputFile)
    doLast {
        logger.info("fibonacciTask started")
        val result = fibonacci(45)
        outputFile.writeText(result.toString())
        logger.info("fibonacciTask result: $result")
    }
}

// run task in docker container
